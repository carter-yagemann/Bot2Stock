# -*- coding: utf8 -*-

import time
import threading

from icapserver import *

#set_logger('debug')
#temp = """This is an example of a simple HTML page with one paragraph"""

class ExampleICAPHandler(BaseICAPRequestHandler):

	def example_OPTIONS(self):
		self.set_icap_response(200)
		self.set_icap_header('Methods', 'RESPMOD, REQMOD')
		self.set_icap_header('Service', 'ICAP Server' + ' ' + self._server_version)
		self.set_icap_header('Options-TTL', '3600')
		self.set_icap_header('Preview', '0')
		self.send_headers(False)

	def example_REQMOD(self):
		self.no_adaptation_required()

	def example_RESPMOD(self):

		# # detect compression
		# self.compressed = None
		# if  len(self.enc_res_headers.get("content-encoding", []))>0:
		# 	self.compressed=self.enc_res_headers["content-encoding"][0]

		# # check if it is html
		# type_1 = "".join(self.enc_res_headers.get("content-type", []))
		# if "text/html" in type_1:
		# 	print("html")
		# 	self.process_html()
		# else:
		# 	self.no_adaptation_required()

		self.send_error(500, 'Something goes wrong :(')
	
	def process_html(self):
		
		self.set_icap_response(200)

		#copy headers except content-length and content-encoding
		self.set_enc_status(' '.join(self.enc_res_status))
		for h in self.enc_res_headers:
				#for v in self.enc_res_headers[h]:
					#print "get",h,v
				if h.lower()=="content-length":
					continue
				elif h.lower()=="content-encoding":
					self.gzip = True
					continue
				elif h.lower()=="cache-control":
					continue
				for v in self.enc_res_headers[h]:
					self.set_enc_header(h, v)
					#print "set",h,v
        	
		self.set_enc_header("Cache-Control", "no-cache, max-age=10")

		if not self.has_body:
				self.send_headers(False)
				return

		#copy received data
		for chunk in self.get_flat_payload():
			print(chunk)

		# append our data
		self.write_chunk("yaya")
		self.write_chunk('')

	def get_flat_payload(self):
        	if self.compressed == "deflate":
            		decompressor = zlib.decompressobj()
            		for chunk in self.get_payload():
                		if chunk:
                    			yield decompressor.decompress(chunk)
        	elif self.compressed == "gzip":
            		decompressor = gzip.GzipFile(fileobj=Pipe(self.get_payload()))
            		while True:
                		chunk = decompressor.read(4096)

                		if not chunk:
                   			break
                		yield chunk
        		else:
            			for chunk in self.get_payload():
                			if chunk:
                    				yield chunk

	def get_payload(self):
		if self.preview:
			prevbuf = ''
			while True:
				chunk = self.read_chunk()
				if chunk == '':
					break
				prevbuf += chunk
			if self.ieof:
				self.send_headers(True)
				yield prevbuf
				return
			self.cont()
			self.send_headers(True)
			if len(prevbuf) > 0:
				yield prevbuf
		else:
			self.send_headers(True)
		while True:
			chunk = self.read_chunk()
			yield chunk
			if chunk == '':
				break

class ExampleICAPServer():

	def __init__(self, addr='', port=13440):
		self.addr = addr
		self.port = port

	def start(self):
		self.server = ICAPServer((self.addr, self.port), ExampleICAPHandler)
		self.thread = threading.Thread(target=self.server.serve_forever)
		self.thread.start()
		return True

	def stop(self):
		self.server.shutdown()
		self.server.server_close()
		self.thread.join(2)
		return True


try:
	server = ExampleICAPServer()
	server.start()
	print 'Use Control-C to exit'
	while True:
		time.sleep(1)
except KeyboardInterrupt:
	server.stop()
	print "Finished"
